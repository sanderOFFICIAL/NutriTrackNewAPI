// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutriTrack.Models;

#nullable disable

namespace NutriTrackAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NutriTrackAPI.Models.Admin", b =>
                {
                    b.Property<string>("admin_uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("registration_date")
                        .HasColumnType("datetime2");

                    b.HasKey("admin_uid");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.Consultant", b =>
                {
                    b.Property<string>("consultant_uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("current_clients")
                        .HasColumnType("int");

                    b.Property<int>("experience_years")
                        .HasColumnType("int");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("last_login")
                        .HasColumnType("datetime2");

                    b.Property<int>("max_clients")
                        .HasColumnType("int");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("profile_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("consultant_uid");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.ConsultantNote", b =>
                {
                    b.Property<int>("note_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("note_id"));

                    b.Property<string>("consultant_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("goal_id")
                        .HasColumnType("int");

                    b.Property<string>("user_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("note_id");

                    b.HasIndex("consultant_uid");

                    b.HasIndex("goal_id");

                    b.HasIndex("user_uid");

                    b.ToTable("ConsultantNotes");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.ConsultantRequest", b =>
                {
                    b.Property<int>("request_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("request_id"));

                    b.Property<string>("consultant_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("responded_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("request_id");

                    b.HasIndex("consultant_uid");

                    b.HasIndex("user_uid");

                    b.ToTable("ConsultantRequests");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.ExerciseEntry", b =>
                {
                    b.Property<int>("exercise_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("exercise_id"));

                    b.Property<double>("calories_burned")
                        .HasColumnType("float");

                    b.Property<int>("duration_minutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("entry_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("exercise_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("exercise_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("exercise_id");

                    b.HasIndex("user_uid");

                    b.ToTable("ExerciseEntries");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.MealEntry", b =>
                {
                    b.Property<int>("entry_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("entry_id"));

                    b.Property<double>("calories")
                        .HasColumnType("float");

                    b.Property<double>("carbs")
                        .HasColumnType("float");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("entry_date")
                        .HasColumnType("datetime2");

                    b.Property<double>("fats")
                        .HasColumnType("float");

                    b.Property<string>("meal_type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("protein")
                        .HasColumnType("float");

                    b.Property<double>("quantity_grams")
                        .HasColumnType("float");

                    b.Property<string>("user_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("entry_id");

                    b.HasIndex("user_uid");

                    b.ToTable("MealEntries");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.StreakHistory", b =>
                {
                    b.Property<int>("streak_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("streak_id"));

                    b.Property<int>("current_streak")
                        .HasColumnType("int");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("streak_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("streak_id");

                    b.HasIndex("user_uid");

                    b.ToTable("StreakHistory");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.User", b =>
                {
                    b.Property<string>("user_uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("activity_level")
                        .HasColumnType("int");

                    b.Property<int>("birth_year")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<double?>("current_weight")
                        .HasColumnType("float");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("height")
                        .HasColumnType("int");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("last_login")
                        .HasColumnType("datetime2");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("profile_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_uid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.UserConsultant", b =>
                {
                    b.Property<string>("user_uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("consultant_uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("assignment_date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("user_consultant_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_consultant_id"));

                    b.HasKey("user_uid", "consultant_uid");

                    b.HasIndex("consultant_uid");

                    b.ToTable("UserConsultants");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.UserGoal", b =>
                {
                    b.Property<int>("goal_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("goal_id"));

                    b.Property<string>("consultant_uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("daily_calories")
                        .HasColumnType("float");

                    b.Property<double>("daily_carbs")
                        .HasColumnType("float");

                    b.Property<double>("daily_fats")
                        .HasColumnType("float");

                    b.Property<double>("daily_protein")
                        .HasColumnType("float");

                    b.Property<int>("duration_weeks")
                        .HasColumnType("int");

                    b.Property<string>("goal_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("is_approved_by_consultant")
                        .HasColumnType("bit");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("date");

                    b.Property<double>("target_weight")
                        .HasColumnType("float");

                    b.Property<string>("user_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("goal_id");

                    b.HasIndex("consultant_uid");

                    b.HasIndex("user_uid");

                    b.ToTable("UserGoals");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.WaterIntake", b =>
                {
                    b.Property<int>("intake_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("intake_id"));

                    b.Property<double>("amount_ml")
                        .HasColumnType("float");

                    b.Property<DateTime>("entry_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("intake_id");

                    b.HasIndex("user_uid");

                    b.ToTable("WaterIntake");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.WeightMeasurement", b =>
                {
                    b.Property<int>("measurement_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("measurement_id"));

                    b.Property<string>("device_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_synced")
                        .HasColumnType("bit");

                    b.Property<DateTime>("measured_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("weight")
                        .HasColumnType("float");

                    b.HasKey("measurement_id");

                    b.HasIndex("user_uid");

                    b.ToTable("WeightMeasurements");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.ConsultantNote", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.Consultant", "Consultant")
                        .WithMany("ConsultantNotes")
                        .HasForeignKey("consultant_uid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NutriTrackAPI.Models.UserGoal", "UserGoal")
                        .WithMany("ConsultantNotes")
                        .HasForeignKey("goal_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("ConsultantNotes")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("User");

                    b.Navigation("UserGoal");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.ConsultantRequest", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.Consultant", "Consultant")
                        .WithMany("ConsultantRequests")
                        .HasForeignKey("consultant_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("ConsultantRequests")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.ExerciseEntry", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("ExerciseEntries")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.MealEntry", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("MealEntries")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.StreakHistory", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("StreakHistories")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.UserConsultant", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.Consultant", "Consultant")
                        .WithMany("UserConsultants")
                        .HasForeignKey("consultant_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("UserConsultants")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.UserGoal", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.Consultant", "Consultant")
                        .WithMany("UserGoals")
                        .HasForeignKey("consultant_uid");

                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("UserGoals")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.WaterIntake", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("WaterIntakes")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.WeightMeasurement", b =>
                {
                    b.HasOne("NutriTrackAPI.Models.User", "User")
                        .WithMany("WeightMeasurements")
                        .HasForeignKey("user_uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.Consultant", b =>
                {
                    b.Navigation("ConsultantNotes");

                    b.Navigation("ConsultantRequests");

                    b.Navigation("UserConsultants");

                    b.Navigation("UserGoals");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.User", b =>
                {
                    b.Navigation("ConsultantNotes");

                    b.Navigation("ConsultantRequests");

                    b.Navigation("ExerciseEntries");

                    b.Navigation("MealEntries");

                    b.Navigation("StreakHistories");

                    b.Navigation("UserConsultants");

                    b.Navigation("UserGoals");

                    b.Navigation("WaterIntakes");

                    b.Navigation("WeightMeasurements");
                });

            modelBuilder.Entity("NutriTrackAPI.Models.UserGoal", b =>
                {
                    b.Navigation("ConsultantNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
